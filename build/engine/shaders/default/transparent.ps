#ifdef COMPILE_MainTransparency
XMaterial MainTransparency(PSI_XMaterial IN)
{
	XMaterial OUT = XMATERIAL_LOAD_DEFAULTS();
	
	float4 vColor = g_txBase.Sample(g_sScene, IN.vTexUV);
	// float4 fColor = IN.vPos;
#ifdef HAS_ALPHATEST
	clip(vColor.a - g_xMaterialConstants.pbr_alphatest_threshold);
#endif

#ifdef HAS_NORMALMAP
	float3 vNormal = Color2Normal(g_txNormals.Sample(g_sScene, IN.vTexUV).xyz) * g_xMaterialConstants.nm_weight;
	
	OUT.vNormal = MixNormalMicro(IN.vNormal, vNormal);
	// float2 vDuDv = vNormal.xy;
	
	
#ifdef HAS_REFRACTION
	// float2 vDuDv = OUT.vNormal.xy;
	// float2 vDuDv = g_txNormals.Sample(g_sScene, IN.vTexUV).xy;
	float3 vPos = IN.vPos.xyz / IN.vPos.w;
	
	// vDuDv = float2(0.3,0.3);
	
	float2 vSceneUV = (vPos.xy * float2(1.0, -1.0) + g_vNearFarInvWinSize.zw * 0.5) * 0.5 + 0.5;
	float2 vSceneUVrefract = vSceneUV + vNormal.xy; // (vDuDv - 0.5) * 0.3; // 0.035
	
	float3 vSceneColor;
	if(g_txGBufferD1.Sample(g_sPointClamp, vSceneUVrefract).x < ComDepthByPos(IN.vPos, g_vNearFarInvWinSize.xy))
	{
		vSceneUVrefract = vSceneUV;
	}
	vSceneColor = g_txScene.Sample(g_sPointClamp, vSceneUVrefract).xyz;
	
	// vSceneColor = float3(0,1,0);
	
	vColor = float4(float3(vSceneColor * (1.0 - vColor.w) + vColor.xyz * vColor.w), 1.0);
#endif
	
#else
	OUT.vNormal = IN.vNormal;
#endif


	OUT.vBaseColor = vColor;
	
#ifdef HAS_PARAMMAP
	float4 vParams = g_txParameters.Sample(g_sScene, IN.vTexUV);
	
	OUT.fRoughness = vParams.x;
	OUT.fMetallic = vParams.y;
	OUT.fThickness = vParams.z;
	OUT.fAO = vParams.w;
#else
	OUT.fRoughness = g_xMaterialConstants.pbr_roughness;
	OUT.fMetallic = g_xMaterialConstants.pbr_metallic;
	OUT.fThickness = g_xMaterialConstants.pbr_thickness;
	OUT.fAO = g_xMaterialConstants.pbr_ao;
#endif


/* #ifdef HAS_F0MAP
	OUT.f0 = g_txF0.Sample(g_sScene, IN.vTexUV).x;
#else
	OUT.f0 = g_xMaterialConstants.pbr_f0;
#endif */
	
	return(OUT);
}
#endif

#ifdef COMPILE_MainIllimination
XMaterial MainIllimination(PSI_XMaterial IN)
{
	XMaterial OUT = XMATERIAL_LOAD_DEFAULTS();
	
	float4 fColor = g_txBase.Sample(g_sScene, IN.vTexUV);
	// float4 fColor = IN.vPos;
#ifdef HAS_ALPHATEST
	clip(fColor.a - g_xMaterialConstants.pbr_alphatest_threshold);
#endif
	OUT.vEmissiveColor = fColor.xyz;
	
#ifdef HAS_NORMALMAP
	OUT.vNormal = MixNormalMicro(IN.vNormal, 
		Color2Normal(g_txNormals.Sample(g_sScene, IN.vTexUV).xyz) * g_xMaterialConstants.nm_weight
	);
#else
	OUT.vNormal = IN.vNormal;
#endif

	
	return(OUT);
}
#endif

#ifdef COMPILE_MainShadow
XMaterial MainShadow(PSI_XMaterial IN)
{
	XMaterial OUT = XMATERIAL_LOAD_DEFAULTS();
	
	float4 fColor = g_txBase.Sample(g_sScene, IN.vTexUV);
	// float4 fColor = IN.vPos;
#ifdef HAS_ALPHATEST
	clip(fColor.a - g_xMaterialConstants.pbr_alphatest_threshold);
#endif
	OUT.vBaseColor = fColor;
	
// #ifdef HAS_NORMALMAP
// 	OUT.vNormal = MixNormalMicro(IN.vNormal, 
// 		Color2Normal(g_txNormals.Sample(g_sScene, IN.vTexUV).xyz) * g_xMaterialConstants.nm_weight
// 	);
// #else
	OUT.vNormal = IN.vNormal;
// #endif

	
	return(OUT);
}
#endif
