
/*
hdr_tonemapping
*/

#include <struct.h>

//##########################################################################

SamplerState g_sPointClamp: register(s0);
SamplerState g_sLinearClamp: register(s1);
Texture2D g_txScene: register(t0);
Texture2D g_txLuminance: register(t1);
Texture2D g_txLuminance2: register(t2);
Texture2D g_txBloom: register(t3);

//##########################################################################

cbuffer b8: register(b8)
{
	float g_fAdaptationSpeed;
	float g_fBaseValue;
};

//##########################################################################

float CalcLuminance(float3 color)
{
    return max(dot(color, float3(0.298f, 0.585f, 0.117f)), 0.00001f);
}

// Applies the filmic curve from John Hable's presentation
float3 ToneMapFilmicALU(float3 color)
{
    color = max(0, color - 0.004f);
    color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f)+ 0.06f);

    // result has 1/2.2 baked in
    return pow(color, 2.2f);
}

// Determines the color based on exposure settings
float3 CalcExposedColor(float3 color, float avgLuminance, float threshold, out float exposure)
{
	// Use geometric mean
	avgLuminance = max(avgLuminance, 0.001f);
	float linearExposure = (g_fBaseValue / avgLuminance);
	exposure = log2(max(linearExposure, 0.0001f));
    exposure -= threshold;
    return exp2(exposure) * color;
}

// Applies exposure and tone mapping to the specific color, and applies
// the threshold to the exposure value.
float3 ToneMap(float3 color, float avgLuminance, float threshold, out float exposure)
{
    float pixelLuminance = CalcLuminance(color);
    color = CalcExposedColor(color, avgLuminance, threshold, exposure);
	color = ToneMapFilmicALU(color);
    return color;
}

//##########################################################################


float4 main(VSO_PP IN):SV_TARGET
{
	float4 vColor = g_txScene.Sample(g_sPointClamp, IN.vTexUV);
	float fLuminance = g_txLuminance.Load(uint3(0, 0, 0)).x;
	// float fLuminance2 = exp(g_txLuminance2.Load(uint3(0, 0, 0)).x);	
	float4 vBloomColor = g_txBloom.Sample(g_sLinearClamp, IN.vTexUV);

	// return(vBloomColor);

	float fExposure = 0;
	vColor.xyz = ToneMap(vColor.xyz, fLuminance, 0, fExposure);
	vColor.xyz += vBloomColor.xyz * (1.0 - CalcLuminance(vColor.xyz));
	// vColor.xyz += vBloomColor.xyz * (float3(1.0, 1.0, 1.0) - vColor.xyz);
	
	/* if(IN.vTexUV.x > 0.9 && IN.vTexUV.y > 0.9)
	{
		vColor.xyz = fLuminance;
	}
	if(IN.vTexUV.x > 0.9 && IN.vTexUV.y > 0.8 && IN.vTexUV.y < 0.9)
	{
		vColor.xyz = fLuminance2;
	} */
	
    return(vColor);
}
