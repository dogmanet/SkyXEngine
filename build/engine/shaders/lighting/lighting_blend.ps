
/*
lighting_blend.ps
Cмешивание всех текстур для финального изображения
*/

#include <struct.h>
#include <mtrl.h>
#include <const.h>
#include <lpv.h>

//##########################################################################

Texture2D g_txColor: register(t0);
Texture2D g_txAmbient: register(t1);
Texture2D g_txAO :register(t2);
Texture2D g_txNormals: register(t3);
Texture2D g_txDepth: register(t4);
Texture2D g_txParameters: register(t5);

SamplerState g_sPointClamp: register(s0);
// SamplerState g_sLinearClamp: register(s1);
SamplerState g_sLinearWrap: register(s2);

Texture3D g_txSkylightR: register(t6);
Texture3D g_txSkylightG: register(t7);
Texture3D g_txSkylightB: register(t8);

#ifndef USE_SSLR
TextureCube g_txEnvmap: register(t9);
#endif

// sampler2D g_sColor:register(s0);
// sampler2D g_sAmbient:register(s1);
// sampler2D g_sSpecDiff:register(s2);
// sampler2D g_sNormals:register(s3);
// sampler2D g_sAdaptedLum:register(s4);
// sampler2D g_sParameters:register(s5);


//##########################################################################

float3 GetUV(float3 position)
{
	float4 pVP = mul(float4(position, 1.0f), g_mVP);
	pVP.xy = float2(0.5f, 0.5f) + float2(0.5f, -0.5f) * pVP.xy / pVP.w;
	return float3(pVP.xy, pVP.z / pVP.w);
}

float3 GetPosition(float2 UV, float depth)
{
	float4 position = 1.0f; 
 
	position.x = UV.x * 2.0f - 1.0f; 
	position.y = -(UV.y * 2.0f - 1.0f); 

	position.z = depth; 
 
	position = mul(position, g_mInvVP); 
 
	position /= position.w;

	return position.xyz;
}

float3 GetReflection(float3 texelPosition, float3 texelNormal)
{
	float3 viewDir = normalize(texelPosition - g_vPosCam.xyz);
	float3 reflectDir = normalize(reflect(viewDir, texelNormal));

	float fresnel = /* 0.0 +  */2.8 * pow(1+dot(viewDir, texelNormal), 2);
#ifdef USE_SSLR
	
	float3 currentRay = 0;

	float3 nuv = 0;
	float L = 0.01f;

	float LDelmiter = 0.1f;

	for(int i = 0; i < 10; i++)
	{
		currentRay = texelPosition + reflectDir * L;

		nuv = GetUV(currentRay); // проецирование позиции на экран
		float n = g_txDepth.Sample(g_sPointClamp, nuv.xy).r; // чтение глубины из DepthMap по UV

		float3 newPosition = GetPosition(nuv.xy, n);
		// L = length(texelPosition - newPosition);
		L += 0.05f * i * sign(n);
	}
	
	L = saturate(L * LDelmiter);

	// float error = (1 - L);
	// float error = 1.0f;
	
	// float error = 1.0f;
	
	float fLimit = 0.05f;
	
	float2 err = max(0.0f, abs(nuv.xy - 0.5f) - (0.5f - fLimit)) / fLimit;
	
	float error = max(0.0f, 1.0f - max(err.x, err.y));
	
	
	return(g_txAmbient.Sample(g_sLinearClamp, nuv.xy).xyz * error * fresnel);
	// return(fresnel);
#else
	float4 vSample = g_txEnvmap.Sample(g_sLinearWrap, reflectDir);
	return(vSample.xyz * vSample.w * 16.0f * fresnel);
#endif
}

int3 GetSkyLightGridPos(float3 worldPos, uint uCascade)
{
	return((worldPos - GetGridCenter(uCascade)) / float3(1.0, 2.0, 1.0) + int3(8, 2, 8));
}


float3 GetPixelSkyLight(float3 vPosition, float3 vNormalPixel)
{
	float4 SHintensity = dirToSH(vNormalPixel);
	
	// float3 vTexCoord = vPosition / float3(16.0, 8.0, 16.0);
	float3 vTexCoord = float3(0.0, 0.0, 0.0);
	
	// float r = max(0.0f, dot(SHintensity, g_vSkyBoxLights[0][0][0][0]));
	// float g = max(0.0f, dot(SHintensity, g_vSkyBoxLights[0][0][0][1]));
	// float b = max(0.0f, dot(SHintensity, g_vSkyBoxLights[0][0][0][2]));
	
	// float r = max(0.0f, dot(SHintensity, g_txSkylightR.Sample(g_sLinearClamp, vTexCoord)));
	// float g = max(0.0f, dot(SHintensity, g_txSkylightG.Sample(g_sLinearClamp, vTexCoord)));
	// float b = max(0.0f, dot(SHintensity, g_txSkylightB.Sample(g_sLinearClamp, vTexCoord)));
	
	float r = max(0.0f, dot(SHintensity, g_txSkylightR.Load((int4)0)));
	float g = max(0.0f, dot(SHintensity, g_txSkylightG.Load((int4)0)));
	float b = max(0.0f, dot(SHintensity, g_txSkylightB.Load((int4)0)));
	
	return(float3(r, g, b) / PI);
}

// float4 main(VSO_PP IN):COLOR0
float4 main(VSO_ResPos IN):COLOR0
{
	float4 vAlbedo = g_txColor.Sample(g_sPointClamp, IN.vTexUV);
	float4 vColor = g_txAmbient.Sample(g_sPointClamp, IN.vTexUV);
	float fDepth = g_txDepth.Sample(g_sPointClamp, IN.vTexUV).r;
	float4 vNormals = g_txNormals.Sample(g_sPointClamp, IN.vTexUV);
	float4 vParams = g_txParameters.Sample(g_sPointClamp, IN.vTexUV);
#ifdef USE_AO
	float3 vAO = g_txAO.Sample(g_sPointClamp, IN.vTexUV).xxx;
#endif
	
	float fF0 = vNormals.w;
	
	float4 vPosition = float4(g_vPosCam.xyz + IN.vWorldRay * fDepth, 1.0);
	float3 vNormalPixel = normalize(NormalDecode(vNormals.xyz).xyz);
	
	// vColor.rgb += (1.0f - vParams.x) * GetReflection(vPosition.xyz, vNormalPixel) * lerp((float3)(0.1f * fF0), vAlbedo, vParams.y) * vAlbedo.w;
	vColor.rgb += (1.0f - vParams.x) * GetReflection(vPosition.xyz, vNormalPixel) * lerp((float3)fF0, vAlbedo.xyz, vParams.y) * vAlbedo.w;
	
	vColor.rgb += vAlbedo.xyz * GetPixelSkyLight(vPosition.xyz, vNormalPixel) * vAlbedo.w* vParams.w
#ifdef USE_AO
	* vAO
#endif
;
	
	vColor.rgb += vAlbedo.xyz * (1.0f - vAlbedo.w);
	
	
	
	
	// float fAdaptedLum = 0.2f;
	
	// vColor.rgb *= TONE_MAPPING_DENOMENATOR/(fAdaptedLum + TONE_MAPPING_ADAPT_ADD_BIAS);
	// vColor.rgb /= (fAdaptedLum + vColor.rgb);
#pragma warning(push)
#pragma warning(disable: 3571)
	return float4(pow(vColor.rgb, 1.0/2.2), vColor.a);
#pragma warning(pop)
	// return float4(vColor.rgb, vColor.a);
	// return float4(GetReflection(vPosition.xyz, vNormalPixel), 1.0f);
	
#if 0
	float4 vNormal = tex2D(g_sNormals,IN.vTexUV);
	float2 vLayerType = LayerDecode(vNormal.w);
	//vLayerType.x *= LAYERS_COUNT_MAX;
	//return half4(vLayerType.x, vLayerType.x, vLayerType.x, 1);
	//half fSort = LayerDecodeType(vNormal.w);
	//half fLayer = LayerDecodeLayer(vNormal.w);
	
	//цвет приводим к sRGB
	float4 vColor = tex2D(g_sColor,IN.vTexUV);
	vColor.rgb = pow(vColor.rgb, 2.2);
	float4 vParameters = tex2D(g_sParameters,IN.vTexUV);

	float4 vAmbient = tex2D(g_sAmbient,IN.vTexUV);
	//vAmbient.xyz *= 2;
	float fAverage = (vAmbient.x + vAmbient.y + vAmbient.z)/3.0;
	
	/* расчет фонового цвета
	1) интерполяция от чернобелого до цветного, на основании затенения, то есть чем больше тень тем меньше там фонового цвета
	*/
	float3 vAmbientColor = lerp(fAverage, vAmbient.xyz, saturate(vAmbient.w+0.5));
	
	/* 2) интерполяция приема цвета материалом, чем больше отражательная способность (f0) тем меньше примет цвета материал*/
	//vAmbientColor = lerp(vAmbientColor.xyz, fAverage, clamp(vParameters.y, F0_MIN_4_DEST_AMBIENT, F0_MAX_4_DEST_AMBIENT));
	
	float fSpecular = tex2D(g_sSpecDiff,IN.vTexUV).r;
	float fAdaptedLum = tex2D(g_sAdaptedLum, g_vTexUVcenter);

	// если материал освещаемый то надо вычислить его освещенность
	if(vLayerType.y == MTLTYPE_LIGHT)
		vColor.xyz = (vAmbientColor * vAmbient.w * vColor.xyz) + (fSpecular * 0.5 * vAmbient.xyz);
		
	// если слой материала относится к непрозрачной геометрии, тогда не нужна прозрачность
	if(vLayerType.x == LAYER_OPAQUE)
		vColor.a = 1.0;

	//применение тонмапинга
	vColor.rgb *= TONE_MAPPING_DENOMENATOR/(fAdaptedLum + TONE_MAPPING_ADAPT_ADD_BIAS);
	vColor.rgb /= (fAdaptedLum + vColor.rgb);
	
	//приводим цвет к линейному пространству
	return float4(pow(vColor.rgb, 1.0/2.2), vColor.a);
#endif
}
