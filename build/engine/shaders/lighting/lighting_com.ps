
/*
lighting_blend.ps
Расчет освещения и заполнение данными расчетов render targets
*/

#include <struct.h>
#include <mtrl.h>
#include <const.h>
#include <shadow.h>

//##########################################################################

cbuffer perLight: register(b0)
{
	float4 g_vLightColorPower;
	float4 g_vLightPosShadow;
#ifdef IS_SPOT
	float4 g_vLightSpotDirection;
	float2 g_vLightSpotInnerOuterAngles;
#endif
};



//##########################################################################

SamplerState g_sPointClamp: register(s0);

Texture2D g_txScene: register(t0);
Texture2D g_txNormals: register(t1);
Texture2D g_txParameters: register(t2);
//x - шероховатость (roughness)
//y - metallic
//z - толщина (thickness)
//w - occlusion

// pCtx->setPSTexture(m_pGBufferColor);
// pCtx->setPSTexture(m_pGBufferNormals, 1);
// pCtx->setPSTexture(m_pGBufferParams, 2);
// pCtx->setPSTexture(m_pGBufferDepth, 3);

// Texture2D g_txShadow: register(t4);
// Texture2D g_txAdaptedLum: register(t5);

Texture2D g_txDepthView: register(t3);
// Texture2D g_txDepthShadow: register(t4);
// Texture2D g_txRandom: register(t);

//#############################################################################

//! Учет шероховатости
float D_Get(float roughness, float NdotH)
{
	float a = max(0.001f, roughness);
	float a2 = a*a;
	float d = ((NdotH * NdotH) * (a2 - 1.0) + 1.0);
	
	float NdotH2 = NdotH * NdotH;
	return ((1.0f/(PI * a2 * NdotH2 * NdotH2 + 0.001)) * exp((NdotH2 - 1.0f) / ( a2 * NdotH2)));///(1.f+roughness);
}

float GGX_Distribution(float alpha, float cosThetaNH)
{
    float alpha2 = alpha * alpha;
    float NH_sqr = saturate(cosThetaNH * cosThetaNH);
    float den = NH_sqr * alpha2 + (1.0 - NH_sqr);
    // float den = cosThetaNH * cosThetaNH * (alpha2 - 1.0f) + 1.0f;
    return alpha2 / ( PI * den * den );
}

//! Коэффициент френеля
float4 F_Get(float4 f0, float HdotV)
{
	// return(1);
    return (f0 + (1.0 - f0) * pow((1.0 - HdotV), 5));
}

//! Геометрическая составляющая (самозатенение)
float G_Get(float NdotV, float NdotL, float LdotV, float NdotH,float VdotH)
{
	return min(1.0f, min((2.0f * NdotH * NdotV)/VdotH, (2.0f * NdotH * NdotL)/ VdotH));
}

// float4 GetSpecular(float fRoughness, float4 fF0,float NdotH,float NdotV,float NdotL,float VdotL,float HdotV)
float4 GetSpecular(float fRoughness, float4 fF0, float fNdotL, float3 vV, float3 vL, float3 vN)
{
	float fLdotV = dot(vL, vV);
	float fNdotV = dot(vN, vV);
	
	float fAlpha = fRoughness * fRoughness;
	
	
	// float3 vHalfVector = normalize(vV + vL);
	// float fNdotH = dot(vN, vHalfVector);
	float fVLlen = length(vV + vL);
	float fNdotH = (fNdotL + fNdotV) / fVLlen;
	// float fVdotH = dot(vHalfVector, vV); 
	float fVdotH = 0.5f * fVLlen; 
	
	float2 tmp = abs(float2(fNdotL, fNdotV));
	
	// float D = D_Get(fRoughness, fNdotH);
	float D = GGX_Distribution(fAlpha, fNdotH);
	float4 F = F_Get(fF0, fVdotH);
	// float4 F = F_Get(fF0, fNdotV);
	// float4 F = F_Get(fF0, dot(vL, normalize(vV + vL)));
	// float4 F = F_Get(fF0, dot(normalize(vV + vL), vV));
	return ((D*F) / (2.0f * lerp(2 * tmp.x * tmp.y, tmp.x + tmp.y, fAlpha) + 0.001f));
	
	/* 
	float3 vHalfVector = normalize(vV + vL);
	float fNdotH = dot(vN, vHalfVector);
	float fNdotV = dot(vN, vV);
	float fLdotV = dot(vL, vV);
	float fHdotV = dot(vHalfVector, vV); 
	
	float D = D_Get(fRoughness, fNdotH);
	float G = G_Get(fNdotV, fNdotL, fLdotV, fNdotH, fHdotV);
	float4 F = F_Get(fF0, fHdotV)/ *  * saturate(fF0*3.0f) * /;
	return ((D*G*F) / (4.0f*fNdotL*fNdotV+0.001f));
	*/
}

float4 ComputeDirectLight(float3 vPosition, float4 vAlbedo, float3 vNormal, float fF0, float fRoughness, float fMetallic, float fThickness,
	IShadow shadow)
{
	float4 OUT;
	
#ifdef IS_PSSM
	float fAttenuation = 1.0f;
	float3 vLigth = g_vLightPosShadow.xyz;
#else
	float fDistance = distance(vPosition.xyz, g_vLightPosShadow.xyz);
	
	// float fInvDistance = 1.f - (fDistance/g_vLightColorPower.w);
	
	// [branch]if(fInvDistance < 0.0)
		// fInvDistance = 0.0;
	
	// float fAttenuation = fInvDistance * fInvDistance;
	// float fAttenuation = 1.0f / (1.0f + fDistance * fDistance);
	float fAttenuation = saturate((1.0f / fDistance) * (1.f - (fDistance/g_vLightColorPower.w)));
	
	float3 vLigth = normalize(g_vLightPosShadow.xyz - vPosition.xyz);
#endif

	float fShadow = 1.0;
#ifdef IS_SHADOWED
	// float3 vWorldPos, float3 vLightPos, uint uIdx, float fThickness
	fShadow *= shadow.genShadow(vPosition, g_vLightPosShadow.xyz, 0, fThickness).x;
#endif

#ifdef IS_SPOT
	float fNdotD = dot(-vLigth, g_vLightSpotDirection.xyz);
	fShadow *= saturate((fNdotD - g_vLightSpotInnerOuterAngles.y) / (g_vLightSpotInnerOuterAngles.x - g_vLightSpotInnerOuterAngles.y));
#endif
	
	float3 vVertexToEye = normalize(g_vObserverPosCam.xyz - vPosition.xyz);
	
	float fNdotL = dot(vNormal, vLigth);
	
	float4 vSpecular = (float4)0;
	float fDiffuse = 0;
		
		
	vSpecular = max(0.0f, GetSpecular(fRoughness, float4(vAlbedo.xyz, fF0), fNdotL, vVertexToEye, vLigth, vNormal));
	
	
	[branch]if(fNdotL < 0.0f)
	{
		// [branch]if(fThickness < 0.99f)
		// {
			fNdotL *= -1.0f;
			fDiffuse = (1.0f - fThickness) * fNdotL / PI;
			// fShadow += fThickness;
			// fShadow = max(fShadow, 1.0f - fThickness);
			
			float _Power = 4.0f;
			float _Scale = 1.0f;
			float _Distortion = 0.2f;
			
			float3 vLTLight = normalize(vLigth + vNormal * _Distortion);
			float fLTDot = pow(saturate(dot(vVertexToEye, -vLTLight)), _Power) * _Scale;
			fDiffuse *= fLTDot;
		// }
	}
	else
	{
		fDiffuse = fNdotL / PI;
	}

	// 

	// fAttenuation *= fNdotL;


	// float fMdiffuse = saturate(fNdotL * 0.5 + 0.5);
	// float fDiffuse = 1.0f;
	
	// OUT.xyz = lerp(vAlbedo.xyz, g_vLightColorPower.xyz * lerp(vAlbedo.xyz * fDiffuse + vSpecular.www, vSpecular.xyz, fMetallic) * fAttenuation * fShadow, vAlbedo.w);
	
	
	// OUT.xyz = (g_vLightColorPower.xyz * lerp(vAlbedo.xyz * fDiffuse + vSpecular.www, vSpecular.xyz, fMetallic) * fAttenuation * fShadow) * vAlbedo.w;
	
	
	// {
		float3 vHalfVector = normalize(vVertexToEye + vLigth);
		// float fNdotH = dot(vN, vHalfVector);
		float fVdotH = dot(vVertexToEye, vHalfVector);
		// float fVLlen = length(vVertexToEye + vLigth);
		// float fVdotH = 0.5f * fVLlen; 
	// }
	float F = F_Get(fF0, fVdotH).x;
	float diffK = 1.0f - F;

// return(fVdotH);
	
	OUT.xyz = (g_vLightColorPower.xyz * lerp(vAlbedo.xyz * fDiffuse/*  * diffK */ + vSpecular.www, vSpecular.xyz, fMetallic) * fAttenuation * fShadow) * vAlbedo.w;
	
	OUT.w = 1.0f;
	return OUT;
}


//#############################################################################

// #define main GenShadow
// 
// #ifdef IS_PSSM
// #include <ppgensm/ppgensm_pssm.ps>
// #else
// #ifdef IS_SPOT
// #include <ppgensm/ppgensm_direct.ps>
// #else
// #include <ppgensm/ppgensm_point.ps>
// #endif
// #endif
// #undef main

//#############################################################################

//IS_SPOT
float4 main(VSO_ResPos IN):SV_TARGET
{
	float4 OUT;

	float4 vAlbedo = g_txScene.Sample(g_sPointClamp, IN.vTexUV);
	float4 vNormals = g_txNormals.Sample(g_sPointClamp, IN.vTexUV);
	float4 vParam = g_txParameters.Sample(g_sPointClamp, IN.vTexUV);
	float fDepth = g_txDepthView.Sample(g_sPointClamp, IN.vTexUV).r;
	
	float4 vPosition = float4(g_vObserverPosCam.xyz + IN.vWorldRay * fDepth, 1.0);
	float3 vNormalPixel = normalize(NormalDecode(vNormals.xyz).xyz);
	
	// return(float4(g_vObserverPosCam.xyz, 1.0f));
	// return(float4(frac(vPosition.zzz), 1.0f));
	// return(float4((float3)fDepth, 1.0f));
	// return(float4(frac(IN.vWorldRay), 1.0f));
	
	float fF0 = vNormals.w;
	// float fRoughness = lerp(PARAM_LIGHTING_ROUGHNESS_MIN, PARAM_LIGHTING_ROUGHNESS_MAX, vParam.x);
	float fRoughness = vParam.x;
	float fMetallic = vParam.y;
	float fThickness = vParam.z;
	float fAO = vParam.w;
	
	
#ifdef IS_PSSM
	CShadowPSSM shadow;
#else
#ifdef IS_SPOT
	CShadowDirect shadow;
#else
	CShadowPoint shadow;
#endif
#endif
		
	return(ComputeDirectLight(vPosition, vAlbedo, vNormalPixel, fF0, fRoughness, fMetallic, fThickness, shadow));
}


















