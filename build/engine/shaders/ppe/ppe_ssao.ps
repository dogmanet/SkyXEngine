
/*
ppe_ssao.ps
Просчет ssao с учетом нормалей, на выходе зернистая карта затенения
*/

#include <struct.h>
#include <mtrl.h>
#include <const.h>

//##########################################################################

SamplerState g_sPointClamp: register(s0);
SamplerState g_sLinearWrap: register(s2);

Texture2D g_txNoise :register(t2);
Texture2D g_txNormals :register(t3);
Texture2D g_txDepth :register(t4);

//##########################################################################

// float4_t(0.3f, 0.1f, 0.8f, 0.3f / gdata::vNearFar.y)
#define g_vParams float4(0.3f, 0.1f, 0.8f, 0.3f)
//x - радиус
//y - минимально допустимая разница в глубине между пикселя для просчета затенения
//z - освещенность пикселя по дефолту (если разница меньше минимальной)
//w - допустимая разница для сравнения

cbuffer b7: register(b7)
{
	float4 g_aRndVectors[24];
};

#if defined(SSAO_Q_3)
static int g_iNumSam = 24;
#elif defined(SSAO_Q_2)
static int g_iNumSam = 16;
#else
static int g_iNumSam = 8;
#endif

//##########################################################################
float4 main(VSO_ResPos IN):COLOR0
{
	float fDepth = g_txDepth.Sample(g_sPointClamp, IN.vTexUV).r;
	// float3 vRndVec = normalize(2.0 * g_txNoise.Sample(g_sLinearWrap, IN.vTexUV * 0.03125 / g_vNearFar.zw).bgr - 1.0);
	// float3 vRndVec = normalize(2.0 * g_txNoise.Sample(g_sLinearWrap, IN.vTexUV * 0.03125 / g_vNearFar.zw).bgr - 1.0);
	float3 vRndVec = normalize(2.0 * g_txNoise.Sample(g_sLinearWrap, IN.vTexUV * 0.25 / g_vNearFar.zw).bgr - 1.0);
	
	if(fDepth >= 1.0)
	{
		return(float4(1, 1, 1, 1));
	}
	
	float3 vPosition = float3(g_vObserverPosCam.xyz + IN.vWorldRay * fDepth);
		
	float3 vNormal = normalize(NormalDecode(g_txNormals.Sample(g_sPointClamp, IN.vTexUV).xyz).xyz);
	
	float3 vTangent = normalize(vRndVec - vNormal * dot(vRndVec, vNormal));
	float3 vBitangent = cross(vNormal, vTangent);
	float3x3 mTBN = float3x3(vTangent, vBitangent, vNormal);
	
	// return float4(vNormal /** 0.5 + 0.5*/, 1);
	float fOcclusion = 0.0;
	[unroll]for(int i = 0; i < g_iNumSam; ++i)
	{
		float3 vHemiRay = mul(g_aRndVectors[i].xyz, mTBN);
		float4 vNewPos = float4(vPosition + vHemiRay * g_vParams.x, 1);
		
		vNewPos = mul(vNewPos, g_mObserverVP);
		float fNewDepth = 1.0f - (vNewPos.z / g_vObserverNearFar.x);
		vNewPos /= vNewPos.w;
		vNewPos.x = vNewPos.x * 0.5 + 0.5;
		vNewPos.y = vNewPos.y * -0.5 + 0.5;
		
		float fSampleDepth = g_txDepth.Sample(g_sPointClamp, vNewPos.xy).r;
		
		float rangeCheck = smoothstep(0.0, 1.0, g_vParams.x / abs((fSampleDepth - fDepth) * g_vObserverNearFar.y));

		fOcclusion += (fSampleDepth >= fNewDepth ? 0.0 : rangeCheck);  
	}

	fOcclusion = 1.0 - saturate(fOcclusion / g_iNumSam);
	
	// fOcclusion = lerp(1.0, fOcclusion, 0.6);
	// fOcclusion = pow(fOcclusion, 2);
	// fOcclusion = lerp(1.0, fOcclusion, saturate((fDepth * g_vObserverNearFar.y) / PP_SSAO_DIST_EMERSION));
	
	return(float4(fOcclusion, fOcclusion, fOcclusion, 1));
}
