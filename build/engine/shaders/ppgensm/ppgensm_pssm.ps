
/*
ppgensm_pssm.ps
Генерация теней для глобального света
*/

#include <struct.h>
#include <shadow.h>
#include <mtrl.h>
#include <ps.h>

//##########################################################################

static const float3 offset[6] = {   
	float3(0.5, 0.5, 0.5), 
	float3(-0.5, 0.5, -0.5),   
	float3(-0.5, 0.5, -0.5), 
	float3(-0.5, -0.5, 0.5),   
	float3(-0.5, 0.5, 0.5), 
	float3(0.5, 0.5, -0.5)
}; 
static const float3 mulX[6] = {   
	float3(0, 0, -1), 
	float3(0, 0, 1), 
	float3(1, 0, 0),   
	float3(1, 0, 0), 
	float3(1, 0, 0), 
	float3(-1, 0, 0)
}; 
static const float3 mulY[6] = {   
	float3(0, -1, 0), 
	float3(0, -1, 0), 
	float3(0, 0, 1),   
	float3(0, 0, -1), 
	float3(0, -1, 0), 
	float3(0, -1, 0)
};


static const float fBaseBias[6] = {   
	0.000015f, 
	0.00002f, 
	0.00004f,   
	0.00008f, 
	0.00010f, 
	0.0002f
};



//##########################################################################


cbuffer perShadow: register(b6)
{
	float4x4 g_mMatrixTextureV[6];
	float4x4 g_mMatrixTextureP[6];
	float4 vSizeBoundNearFar;
};

SamplerComparisonState g_sComparisonLinearClamp: register(s1);

TextureCube g_txDepthShadow: register(t4);

//##########################################################################

#define NUM_SPLITS 6

float4 main(VSO_ResPos IN): COLOR0
{
	float fShadow = 1.0f;
	float fDepth = g_txDepthView.Sample(g_sPointClamp, IN.vTexUV).r;
	float3 vNormalWS = normalize(NormalDecode(g_txNormals.Sample(g_sPointClamp, IN.vTexUV).xyz).xyz);
	float4 vPixelPosWS = float4(g_vPosCam + IN.vWorldRay * fDepth, 1.f);
	
	float delta = 1.0f / vSizeBoundNearFar.x;
		
	[unroll]for(int split = 0; split < NUM_SPLITS; split++)   
	{
		float4 vPixelPosLS = mul(vPixelPosWS, g_mMatrixTextureV[split]);
		float4 vTexCoord = mul(vPixelPosLS, g_mMatrixTextureP[split]);
		// float4 vTexCoord = mul(vPixelPosWS, g_mMatrixTextureV[split]);
		
		vTexCoord.xyz = vTexCoord.xyz / vTexCoord.w;
		// if(IN.distance > splitEnd[split])
		// {
			if(min(vTexCoord.x, vTexCoord.y) > delta && max(vTexCoord.x, vTexCoord.y) < 1.0f - delta)
			{
				float3 cubeCoord = offset[split] +
					mulX[split] * vTexCoord.x +
					mulY[split] * vTexCoord.y;       // Don't sample outside the border.
					
				float3 vNormalLS = normalize(mul(float4(vNormalWS, 0.0f), g_mMatrixTextureV[split]).xyz);
				
				// Locate corresponding light space shadow map grid center
				float2 index = floor(vTexCoord.xy * vSizeBoundNearFar.xx);
				
				// Normalized coordinate in [0,1]
				float2 nlsGridCenter = 2.0f * delta * (index + float2(0.5f, 0.5f)); // Normalized eye space grid center --- [0,1]
				
				// Unnormalized coordinate in [-lightLeft,lightLeft]
				float2 lsGridCenter = vSizeBoundNearFar.y * (2.0f * nlsGridCenter - float2(1.0f, 1.0f));
				
				/** Define light ray **/
				// Light ray direction in light space
				// float3 lsGridLineDir = normalize(float3(lsGridCenter, -vSizeBoundNearFar.z)); // Light space grid line direction    
				float3 lsGridLineDir = normalize(float3(0.0f, 0.0f, -vSizeBoundNearFar.z)); // Light space grid line direction    
				
				/** Plane ray intersection **/
				// Locate the potential occluder for the shading fragment
				float ls_t_hit = dot(vNormalLS, vPixelPosLS.xyz) / dot(vNormalLS, lsGridLineDir);
				float3 ls_hit_p = ls_t_hit * lsGridLineDir;
				
				float constantBias = fBaseBias[split];
				
				/** Compute Adaptive Epsilon **/
				// Normalized depth value in shadow map
				float SMDepth = g_txDepthShadow.Sample(g_sPointClamp, cubeCoord).r;
				// A and B are computed bnased on light near and far planes.
				// They can be retrieved directly from light projection matrix
				float A = vSizeBoundNearFar.w * g_mMatrixTextureP[split][2][2];
				float B = vSizeBoundNearFar.w * g_mMatrixTextureP[split][3][2];    
				float adaptiveDepthBias = 0.5f * pow(1.0f - A - 2.0f * SMDepth, 2) * constantBias / B; 
				
				
				// Use the intersection point as new look up point
				float4 lsPotentialoccluder = mul(float4(ls_hit_p, 1.0), g_mMatrixTextureP[split]);
				lsPotentialoccluder = lsPotentialoccluder / lsPotentialoccluder.w;
				lsPotentialoccluder = 0.5f * lsPotentialoccluder + float4(0.5f, 0.5f, 0.5f, 0.0f);
				
				float actualDepth = min(lsPotentialoccluder.z, vTexCoord.z);
				float actualBias  = adaptiveDepthBias;
				// float actualBias  = -0.0001f;
				
				
				/** Check the visibility **/
				// fShadow = SMDepth < actualDepth + actualBias ? 0.0f : 1.0f;    
				
				fShadow = g_txDepthShadow.SampleCmpLevelZero(g_sComparisonLinearClamp, cubeCoord, actualDepth + actualBias);
				
				break;
			}
		// }
	}
	return(fShadow * 0.95 + 0.05);
}
