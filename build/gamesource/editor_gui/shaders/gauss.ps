
float2	SizeMap = float2(1366.0, 768.0);

float4 g_color : register(c0);

sampler2D BaseSampler:register(s0);

struct PS_INPUT
{
    float4 Pos : POSITION;
	float2 Tex : TEXCOORD0;
};

float CoefBlur = 100.0;


float4 main(PS_INPUT IN) : COLOR0
{
	float2 tx  = IN.Tex;
	
	#ifdef _V_
    float2 dx  = float2(0.0,1.0/SizeMap.y)*CoefBlur;
	#else
    float2 dx  = float2(1.0/SizeMap.x,0.0)*CoefBlur;
	#endif
	
	float2 sdx = dx;
	
    float4 color = tex2D(BaseSampler,tx) * 0.134598;
	//float alpha = color.a;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.127325;
    sdx += dx;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.107778;
    sdx += dx;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.081638;
    sdx += dx;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.055335;
    sdx += dx;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.033562;
    sdx += dx;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.018216;
    sdx += dx;
    color += (tex2D(BaseSampler,tx+sdx) + tex2D(BaseSampler,tx-sdx))*0.008847;
    sdx += dx;
	color *= g_color;
	return(color);
}