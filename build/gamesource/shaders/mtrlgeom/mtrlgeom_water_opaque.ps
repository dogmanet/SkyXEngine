
/*
mtrlgeom_water_opaque.ps
Рендер непрозрачной воды
*/
 
#include <struct.h>
#include <mtrl.h>

//##########################################################################

half2 g_vWinSize;

/*
x - коэфициент смещения текстурных координат 
z - коэфициент микрорельефа
*/
half4 g_vParam;		

half4 g_vNearFarLayers;	

//##########################################################################

sampler2D g_sColor:register(s0);

//!текстура DUDV смещений координат 
sampler2D g_sDetails0:register(s2);
sampler2D g_sNormals0:register(s6);
sampler2D g_vParamTex:register(s10);
sampler2D g_sDepth:register(s14);

//##########################################################################

PSO_Gbuffer main(VSO_WaterPlane IN)
{
	ClipFar(IN.vPos.z,g_vNearFarLayers.y);
	
	IN.vNormal = normalize(IN.vNormal);
	half3 vNormal1 = Color2Normal(tex2D(g_sNormals0, IN.vTexUV2.xy).xyz) * g_vParam.z;
	half3 vNormal2 = Color2Normal(tex2D(g_sNormals0, IN.vTexUV3.xy * 0.5).xyz) * g_vParam.z;
	vNormal1.z = IN.vNormal.z;
	vNormal2.z = IN.vNormal.z;
	half3 vNormal = normalize(vNormal1+vNormal2+IN.vNormal);
	
	half3 vNormalOffset = normalize(Color2Normal(tex2D(g_sDetails0,IN.vTexUV2.xy)) + Color2Normal(tex2D(g_sDetails0,IN.vTexUV3.xy * 0.5)))*g_vParam.x;
	
	IN.vTexUV += vNormalOffset.xy*0.5;
	half4 vColor = tex2D(g_sColor, IN.vTexUV);
	
	return CreateGbuffer(vColor, vNormal, tex2D(g_vParamTex,IN.vTexUV), IN.vPos, g_vNearFarLayers);
}