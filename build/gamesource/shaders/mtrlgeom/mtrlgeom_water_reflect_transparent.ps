
/*
mtrlgeom_water_reflect.ps
Рендер воды (геометрии) с плоским отражением
*/

#include <struct.h>
#include <mtrl.h>
#include <ps.h>

//##########################################################################
 
half2 g_vWinSize;

/*
x - коэфициент смещения текстурных координат 
y - коэфициент прозрачности
z - коэфициент микрорельефа
w - коэфициент смешивания между отражением и основной текстурой (чем больше тем больше будет преобладать цвет основной текстуры, чем меньше тем больше будет преобладать цвет отражения)
*/
half4 g_vParam;	

half3 g_vPosCam;
half4 g_vNearFarLayers;

//##########################################################################

sampler2D g_sColor:register(s0);

//!текстура DUDV смещений координат 
sampler2D g_sDetails0:register(s2);		

//! текстура каустики
sampler2D g_sDetails1:register(s3);

sampler2D g_sNormals0:register(s6);
sampler2D g_sParameters:register(s10);
sampler2D g_sReflection:register(s12);
sampler2D g_sDepth:register(s14);

//##########################################################################

PSO_Gbuffer main(VSO_WaterPlane IN)
{	
	ClipFar(IN.vPos.z,g_vNearFarLayers.y);
	
	IN.vNormal = normalize(IN.vNormal);
	half3 vNormal1 = Color2Normal(tex2D(g_sNormals0, IN.vTexUV2.xy).xyz) * g_vParam.z;
	half3 vNormal2 = Color2Normal(tex2D(g_sNormals0, IN.vTexUV3.xy * 0.5).xyz) * g_vParam.z;
	vNormal1.z = IN.vNormal.z;
	vNormal2.z = IN.vNormal.z;
	half3 vNormal = normalize(vNormal1+vNormal2+IN.vNormal);
	
	half3 vNormalOffset = normalize(Color2Normal(tex2D(g_sDetails1,IN.vTexUV2.xy)) + Color2Normal(tex2D(g_sDetails1,IN.vTexUV3.xy * 0.5)))*g_vParam.x;

	half4 vTexUVRefractProj = mul(IN.vPos, MatrixRefraction);
	half fDepth = tex2D(g_sDepth, vTexUVRefractProj.xy/vTexUVRefractProj.w + half2(0.5/g_vWinSize.x,0.5/g_vWinSize.y)).r;
	half fTransparency = saturate(abs(((IN.vPos.z/g_vNearFarLayers.y) - fDepth)*g_vNearFarLayers.y) / (g_vParam.y * 100.0));
	
	vNormalOffset *= fTransparency;
	
	IN.vTexUV += vNormalOffset.xy*0.5;
	half4 vColor = tex2D(g_sColor, IN.vTexUV);
	
	half4 vParam = tex2D(g_sParameters,IN.vTexUV);
	
	half fLodReflection = GetTexLod4Ref(saturate(vParam.r - 0.1));
	
	half4 vPos4Ref = IN.vPos;
	vPos4Ref.xyz += vNormalOffset;
	half4 vTexUVReflectProj = mul(vPos4Ref,MatrixReflection);
	half4 vReflection = tex2Dlod2(g_sReflection, vTexUVReflectProj.xy/vTexUVReflectProj.w, fLodReflection);
	vColor = lerp(vReflection, vColor, g_vParam.w);
	vColor.a = fTransparency;
	
	//half caustic = (tex2D(DetTex2, IN.vTexUV2.xy*0.5).r + tex2D(DetTex2, IN.vTexUV3.xy*2).r) * 0.5;
	//vColor.rgba = lerp(vColor.rgba, half4(0.9,0.8,0.7, saturate(fTransparency * 4)), clamp(pow(saturate(1.f - (caustic)), 2), 0, 0.4) * (1.0 - fTransparency));
	
	return CreateGbuffer(vColor, vNormal, vParam, IN.vPos, g_vNearFarLayers);
}