
/*
particles_main.ps
Рендер партиклов
*/

#include <struct.h>
#include <mtrl.h>

//##########################################################################

sampler2D BaseSampler:register(s0);
sampler2D DepthSampler:register(s1);
sampler2D SceneSampler:register(s2);

//##########################################################################

half RefractCoef;
half SoftCoef;
half ColorCoef;
half4 Color;
half2 NearFar;

//##########################################################################

half4 main(VSO_Particles IN):COLOR0
{
	half4 color = tex2D(BaseSampler,IN.vTexUV);
	color.rgb = lerp(color.rgb, Color.rgb, Color.a);
	color.rgb *= ColorCoef;
	color.a *= IN.Alpha.x;
	#if defined(PART_SOFT) || defined(PART_REFRACTION)
	half2 texuv = IN.vPos.xy / IN.vPos.w;
	texuv.x = texuv.x * 0.5f + 0.5f;
	texuv.y = texuv.y * (-0.5f) + 0.5f;
	#endif
	
	#if defined(PART_SOFT)
	half depthmap = tex2D(DepthSampler,texuv).r;
	half curdepth = IN.vPos.z / NearFar.y;
	
	color.a *= saturate((depthmap - curdepth)*NearFar.y)*SoftCoef;
	#endif
	
	#if defined(PART_REFRACTION)
	texuv.x += sin(color.a*0.1)*RefractCoef;
	texuv.y += cos(color.a*0.1)*RefractCoef;
	
	half4 colorscene = tex2D(SceneSampler,texuv);
	
	color.rgb = colorscene.rgb;
	color.a = color.a*2.f;
	#endif

	#if defined(PART_LIGHT)
	color *= IN.Light;
	#endif
	clip(color.a - RENDER_PARTICLES_ALPHATEST_VALUE);
	return color;
}