
/*
pp_union_alpha.ps
Объединение полупрозрачных слоев
*/

#include <struct.h>
#include <mtrl.h>

//##########################################################################
 
sampler2D g_sColor:register(s0);
sampler2D g_sSceneLighting:register(s1);
sampler2D g_sDepth:register(s2);
sampler2D g_sNormal:register(s3);
sampler2D g_sParameters:register(s4);

//##########################################################################

half4 g_vWinSize;

static int g_aExistsIDs[4] = {-1,-1,-1,-1};

//##########################################################################

bool IsExists(int id)
{
	for(int i=0;i<4;++i)
	{
		[branch] if(g_aExistsIDs[i] == id)
			return true;
	}
	return false;
}

PSO_UnionAlpha main(VSO_PP IN):COLOR0
{
	PSO_UnionAlpha OUT;
	
	half4 aColor[4];
	half aDepth[4];
	half4 aNormal[4];
	int aSort[4];
	int aSort2[4];
	int aIsTransparency[4];
	half4 aTexUV[4];
	int aIdLayer[4];
	
	aTexUV[0] = half4(IN.vTexUV, 0, 0);
	aTexUV[1] = half4(IN.vTexUV + half2(0, g_vWinSize.w), 0, 0);
	aTexUV[2] = half4(IN.vTexUV + half2(g_vWinSize.z, 0), 0, 0);
	aTexUV[3] = half4(IN.vTexUV + half2(g_vWinSize.z, g_vWinSize.w), 0, 0);
	
	aColor[0] = tex2Dlod(g_sSceneLighting, aTexUV[0]);
	aColor[1] = tex2Dlod(g_sSceneLighting, aTexUV[1]);
	aColor[2] = tex2Dlod(g_sSceneLighting, aTexUV[2]);
	aColor[3] = tex2Dlod(g_sSceneLighting, aTexUV[3]);
	
	aDepth[0] = tex2Dlod(g_sDepth, aTexUV[0]).r;
	aDepth[1] = tex2Dlod(g_sDepth, aTexUV[1]).r;
	aDepth[2] = tex2Dlod(g_sDepth, aTexUV[2]).r;
	aDepth[3] = tex2Dlod(g_sDepth, aTexUV[3]).r;
	
	aNormal[0] = tex2Dlod(g_sNormal, aTexUV[0]);
	aNormal[1] = tex2Dlod(g_sNormal, aTexUV[1]);
	aNormal[2] = tex2Dlod(g_sNormal, aTexUV[2]);
	aNormal[3] = tex2Dlod(g_sNormal, aTexUV[3]);
	
	half2 vLayerType0 = LayerDecode(aNormal[0].w);
	half2 vLayerType1 = LayerDecode(aNormal[1].w);
	half2 vLayerType2 = LayerDecode(aNormal[2].w);
	half2 vLayerType3 = LayerDecode(aNormal[3].w);
	
	aIdLayer[0] = vLayerType0.x;
	aIdLayer[1] = vLayerType1.x;
	aIdLayer[2] = vLayerType2.x;
	aIdLayer[3] = vLayerType3.x;
	
	aIsTransparency[0] = (aIdLayer[0] > LAYER_OPAQUE) ? 1 : 0;
	aIsTransparency[1] = (aIdLayer[1] > LAYER_OPAQUE) ? 1 : 0;
	aIsTransparency[2] = (aIdLayer[2] > LAYER_OPAQUE) ? 1 : 0;
	aIsTransparency[3] = (aIdLayer[3] > LAYER_OPAQUE) ? 1 : 0;
	
	//в случае если у нас нет ппрозрачных слоев то возвращаем текущий цвет
	[branch] if((aIsTransparency[0] == 0 && aIsTransparency[1] == 0 && aIsTransparency[2] == 0 && aIsTransparency[3] == 0))
	{
		OUT.vColor = aColor[0];
		OUT.vDepth0 = aDepth[0];
		OUT.vDepth1 = aDepth[0];
		return OUT;
	}
	else
	{
		[unroll]
		for(int i=0; i<4; ++i)
		{
			aSort[i] = 0;
			
			[unroll]
			for(int k=0; k<4; ++k)
			{
				[branch]
				if(i != k && (aDepth[i] > aDepth[k] || (i > k && aDepth[i] == aDepth[k])))
				{
					++(aSort[i]);
				}
			}
			
			//aSort2[aSort[i]] = i;
			[branch] if(aSort[i] == 0)
				aSort2[0] = i;
			else [branch] if(aSort[i] == 1)
				aSort2[1] = i;
			else [branch] if(aSort[i] == 2)
				aSort2[2] = i;
			else
				aSort2[3] = i;
		}
		
		half4 vCountColor = aColor[aSort2[3]];
		g_aExistsIDs[0] = aIdLayer[aSort2[3]];
		
		half fAlpha = vCountColor.a;
		half fAlpha2 = 0;
		
		//если id текущей поверхности записан либо этот id это нулевая (непрозрачная) поверхность
		//проверка на непрозрачную поверхность нужна для правильного смешивания нулевого слоя, иначе будет жуткий альясинг
		[branch] if(!IsExists(aIdLayer[aSort2[2]]) || aIdLayer[aSort2[2]] == 0)
		{
			fAlpha2 = aColor[aSort2[2]].a;
			vCountColor = aColor[aSort2[2]] * fAlpha2 + vCountColor * (1.f - fAlpha2);
			vCountColor.a = max(fAlpha2,fAlpha) * 1.1;
			fAlpha = vCountColor.a;
			g_aExistsIDs[1] = aIdLayer[aSort2[2]];
		}
		
		[branch] if(!IsExists(aIdLayer[aSort2[1]]) || aIdLayer[aSort2[1]] == 0)
		{
			fAlpha2 = aColor[aSort2[1]].a;
			vCountColor = aColor[aSort2[1]] * fAlpha2 + vCountColor.rgba * (1.f - fAlpha2);
			vCountColor.a = max(fAlpha2,fAlpha) * 1.1;
			fAlpha = vCountColor.a;
			g_aExistsIDs[2] = aIdLayer[aSort2[1]];
		}
		
		[branch] if(!IsExists(aIdLayer[aSort2[0]]) || aIdLayer[aSort2[0]] == 0)
		{
			fAlpha2 = aColor[aSort2[0]].a;
			vCountColor = aColor[aSort2[0]] * fAlpha2 + vCountColor * (1.f - fAlpha2);
			vCountColor.a = max(fAlpha2,fAlpha) * 1.1;
		}
		
		OUT.vColor = vCountColor;
		OUT.vDepth0 = aDepth[aSort2[0]];
		OUT.vDepth1 = aDepth[aSort2[0]];
		
		//если есть хотя бы один не прозрачный материал
		/*[branch] if((!aIsTransparency[0] && aDepth[0] > 0.0) || (!aIsTransparency[1]  && aDepth[1] > 0.0) || (!aIsTransparency[2] && aDepth[2] > 0.0) || (!aIsTransparency[3] && aDepth[3] > 0.0))
			 OUT.vColor.a = 1;*/
		
		//если хотя бы один слой полупрозрачный
		[branch] if(aIsTransparency[0] || aIsTransparency[1] || aIsTransparency[2] || aIsTransparency[3])
			OUT.vDepth1 = 1;
		
		[branch] if(aDepth[aSort2[3]] >= 1 && vCountColor.a < 1.f)
			OUT.vDepth0 = 1;
		
		return OUT;
	}
}