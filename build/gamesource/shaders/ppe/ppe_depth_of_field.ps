
/*
ppe_depth_of_field.ps
Эффект depth of field (размытие по глубине, глубина резкости)
*/

#include <struct.h>
#include <mtrl.h>
#include <ps.h>

//##########################################################################

half4 g_vParam;
//x - откуда начинается нормальное видиние
//y - где оно заканчивается
//z - постепенный переход на ближней плоскости
//w - постепенный переход на дальней плоскости

//! на сколько блюрить небо
half g_fSkyBlur;

half2 g_vNearFar;

//##########################################################################

sampler2D g_sColor:register(s0);
sampler2D g_sDepth:register(s1);
sampler2D g_sBlur:register(s2);

//##########################################################################

half4 main(VSO_PP IN) : COLOR0
{
	half4 vColor = tex2Dlod2(g_sColor, IN.vTexUV, 0);
	half fNearDist = g_vParam.x / g_vNearFar.y;
	half fFarDist = g_vParam.y / g_vNearFar.y;
	half fNearRange = g_vParam.z / g_vNearFar.y;
	half fFarRange = g_vParam.w / g_vNearFar.y;

	half fDepth = tex2Dlod2(g_sDepth, IN.vTexUV, 0).r;
			
	half4 vBlurColor = tex2Dlod2(g_sBlur, IN.vTexUV, 0);
	
    half fBlur = max(
						saturate(1.f - (fDepth - fNearDist) / fNearRange),
						saturate((fDepth - (fFarDist - fFarRange)) / fFarRange)
					);
	fBlur = clamp(0.f, 1.f, fBlur);
	fBlur = lerp(fBlur, g_fSkyBlur, clamp(sign(fDepth - 0.99f)+1.f, 0.f, 1.f));
	
	/*if(fDepth >= 0.99)
		fBlur = g_fSkyBlur;*/

	return lerp(vColor, vBlurColor, fBlur);
}