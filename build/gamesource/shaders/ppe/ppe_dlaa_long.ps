
/*
ppe_dlaa_long.ps
Directionally Localized Anti Aliasing
Обнаружение длинных граней и их размытие
Начало данный шейдер берет отсюда: https://www.gamedev.net/forums/topic/594209-dlaa/
*/

#include <struct.h>
#include <ps.h>

//##########################################################################

#define DLAA_MUL_VAL 0.333

half2 g_vPixelSize;

//##########################################################################

sampler2D g_sColor:register(s0);

//##########################################################################

half4 main(VSO_PP IN) : COLOR0
{
	half4 vColorCenter = tex2Dlod2(g_sColor, IN.vTexUV, 0.0);

	half4 vSampleVertNeg1 = tex2Dlod2(g_sColor, IN.vTexUV + half2(0.0, -3.5) * g_vPixelSize, 0.0); 
	half4 vSampleVertNeg2 = tex2Dlod2(g_sColor, IN.vTexUV + half2(0.0, -7.5) * g_vPixelSize, 0.0);
	half4 vSampleVertPos1 = tex2Dlod2(g_sColor, IN.vTexUV + half2(0.0, 3.5) * g_vPixelSize, 0.0); 
	half4 vSampleVertPos2 = tex2Dlod2(g_sColor, IN.vTexUV + half2(0.0, 7.5) * g_vPixelSize, 0.0); 

	half4 vSampleHorizNeg1 = tex2Dlod2(g_sColor, IN.vTexUV + half2(-3.5, 0.0) * g_vPixelSize, 0.0); 
	half4 vSampleHorizNeg2 = tex2Dlod2(g_sColor, IN.vTexUV + half2(-7.5, 0.0) * g_vPixelSize, 0.0);
	half4 vSampleHorizPos1 = tex2Dlod2(g_sColor, IN.vTexUV + half2(3.5, 0.0) * g_vPixelSize, 0.0); 
	half4 vSampleHorizPos2 = tex2Dlod2(g_sColor, IN.vTexUV + half2(7.5, 0.0) * g_vPixelSize, 0.0); 

	half4 vEdgeAvgH = (vSampleHorizNeg2 + vSampleHorizNeg1 + vColorCenter + vSampleHorizPos1 + vSampleHorizPos2) * 0.2;
	half4 vEdgeAvgV = (vSampleVertNeg2 + vSampleVertNeg1 + vColorCenter + vSampleVertPos1 + vSampleVertPos2) * 0.2;
	vEdgeAvgH.a = saturate(vEdgeAvgH.a * 2.0 - 1.0);
	vEdgeAvgV.a = saturate(vEdgeAvgV.a * 2.0 - 1.0);

	half4 vResult = vColorCenter;

	half fValueLongH = dot(vEdgeAvgH.xyz, DLAA_MUL_VAL);
	half fValueLongV = dot(vEdgeAvgV.xyz, DLAA_MUL_VAL);

	half4 vSampleLeft = tex2Dlod2(g_sColor, IN.vTexUV + half2(-1.0,  0.0) * g_vPixelSize, 0.0);
	half4 vSampleRight = tex2Dlod2(g_sColor, IN.vTexUV + half2(1.0,  0.0) * g_vPixelSize, 0.0);
	half4 vSampleUp = tex2Dlod2(g_sColor, IN.vTexUV + half2(0.0, -1.0) * g_vPixelSize, 0.0);
	half4 vSampleDown = tex2Dlod2(g_sColor, IN.vTexUV + half2(0.0,  1.0) * g_vPixelSize, 0.0);

	half fDotCenter = dot(vColorCenter.xyz, DLAA_MUL_VAL);
	half fDotLeft = dot(vSampleLeft.xyz, DLAA_MUL_VAL);
	half fDotRight = dot(vSampleRight.xyz, DLAA_MUL_VAL);
	half fDotTop = dot(vSampleUp.xyz, DLAA_MUL_VAL);
	half fDotBottom = dot(vSampleDown.xyz, DLAA_MUL_VAL);

	half4 vDiffToCenter = fDotCenter - half4(fDotLeft, fDotTop, fDotRight, fDotBottom);
		
	half4 vBlurAmounts;
	vBlurAmounts.x = saturate(0.0 + (fValueLongV - fDotLeft) / vDiffToCenter.x);
	vBlurAmounts.z = saturate(0.0 + (fValueLongH - fDotTop) / vDiffToCenter.y);
	vBlurAmounts.y = saturate(1.0 + (fValueLongV - fDotCenter) / vDiffToCenter.z);
	vBlurAmounts.w = saturate(1.0 + (fValueLongH - fDotCenter) / vDiffToCenter.w); 

	half4 vLongBlurH = lerp(vSampleLeft, vColorCenter, vBlurAmounts.x);
	vLongBlurH = lerp(vSampleRight, vLongBlurH, vBlurAmounts.y);
	half4 vLongBlurV = lerp(vSampleUp, vColorCenter, vBlurAmounts.z);
	vLongBlurV = lerp(vSampleDown, vLongBlurV, vBlurAmounts.w);

	vResult = lerp(vColorCenter, vLongBlurH, vEdgeAvgV.a);
	vResult = lerp(vResult, vLongBlurV, vEdgeAvgH.a);

	return half4(vResult.rgb, vColorCenter.a);
}