
/*
ppe_nfaa.ps
Normal Filter Anti Aliasing
Сглаживание по нормали
*/

#include <struct.h>
#include <ps.h>

//##########################################################################

half3 g_vParam;
//half Param.x - Strength;
//half Param.y - Scale;
//bool Param.z - IsNotmalMap

half2 g_vPixelSize;

//##########################################################################

sampler2D g_sColor:register(s0);

//##########################################################################

half2 GetNormal(half2 vTexUV) 
{
	half2 vUpOffset = half2(0, g_vPixelSize.y) * g_vParam.y;
	half2 vRightOffset = half2(g_vPixelSize.x, 0) * g_vParam.y;
	
	half3 vTopHeight = tex2Dlod2(g_sColor, vTexUV + vUpOffset, 0).rgb;
	half3 vBottomHeight = tex2Dlod2(g_sColor, vTexUV - vUpOffset, 0).rgb;
	half3 vRightHeight = tex2Dlod2(g_sColor, vTexUV + vRightOffset, 0).rgb;
	half3 vLeftHeight = tex2Dlod2(g_sColor, vTexUV - vRightOffset, 0).rgb;
	
	half3 vLeftTopHeight = tex2Dlod2(g_sColor, vTexUV - vRightOffset + vUpOffset, 0).rgb;
	half3 vLeftBottomHeight = tex2Dlod2(g_sColor, vTexUV - vRightOffset - vUpOffset, 0).rgb;
	half3 vRightBottomHeight = tex2Dlod2(g_sColor, vTexUV + vRightOffset + vUpOffset, 0).rgb;
	half3 vRightTopHeight = tex2Dlod2(g_sColor, vTexUV + vRightOffset - vUpOffset, 0).rgb;

	half3 vSum0 = vRightTopHeight + vBottomHeight + vLeftTopHeight;
	half3 vSum1 = vLeftBottomHeight + vTopHeight + vRightBottomHeight;
	half3 vSum2 = vLeftTopHeight + vRightHeight + vLeftBottomHeight;
	half3 vSum3 = vRightBottomHeight + vLeftHeight + vRightTopHeight;

	half2 vVectors;
	vVectors.x = length(vSum0 - vSum1) * g_vParam.x;
	vVectors.y = length(vSum3 - vSum2) * g_vParam.x;

	return vVectors;
}

//##########################################################################

half4 main(VSO_PP IN) : COLOR0 
{
	half4 vColor0= tex2Dlod2(g_sColor, IN.vTexUV.xy, 0);

	half2 vNormal = GetNormal(IN.vTexUV.xy);			
	
	vNormal = clamp(vNormal, -1, 1) * g_vPixelSize;

	half4 vColor1 = tex2Dlod2(g_sColor, IN.vTexUV.xy + vNormal.xy, 0);
	half4 vColor2 = tex2Dlod2(g_sColor, IN.vTexUV.xy - vNormal.xy, 0);
	half4 vColor3 = tex2Dlod2(g_sColor, IN.vTexUV.xy + half2(vNormal.x, -vNormal.y), 0);
	half4 vColor4 = tex2Dlod2(g_sColor, IN.vTexUV.xy - half2(vNormal.x, -vNormal.y), 0);
	half4 vColor5 = tex2Dlod2(g_sColor, IN.vTexUV.xy + half2(-vNormal.x, vNormal.y), 0);
	half4 vColor6 = tex2Dlod2(g_sColor, IN.vTexUV.xy - half2(-vNormal.x, vNormal.y), 0);

	half4 vCountColor = (vColor0 + vColor1 + vColor2 + vColor3 + vColor4 + vColor5 + vColor6) / 7.0;

	/*[branch]if (g_vParam.z) 
		vCountColor.xyz = normalize(half3(vNormal.xy, 1) * 0.1 + 0.1);*/

	return vCountColor;
}
